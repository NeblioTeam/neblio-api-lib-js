/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetTokenMetadataResponseMetadataOfIssuanceDataUserData from './GetTokenMetadataResponseMetadataOfIssuanceDataUserData';
import IssueTokenRequestMetadataEncryptions from './IssueTokenRequestMetadataEncryptions';
import IssueTokenRequestMetadataRules from './IssueTokenRequestMetadataRules';
import IssueTokenRequestMetadataUrls from './IssueTokenRequestMetadataUrls';

/**
 * The IssueTokenRequestMetadata model module.
 * @module model/IssueTokenRequestMetadata
 * @version 1.2.1
 */
class IssueTokenRequestMetadata {
    /**
     * Constructs a new <code>IssueTokenRequestMetadata</code>.
     * Object representing all metadata at token issuance
     * @alias module:model/IssueTokenRequestMetadata
     */
    constructor() { 
        
        IssueTokenRequestMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssueTokenRequestMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueTokenRequestMetadata} obj Optional instance to populate.
     * @return {module:model/IssueTokenRequestMetadata} The populated <code>IssueTokenRequestMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueTokenRequestMetadata();

            if (data.hasOwnProperty('tokenName')) {
                obj['tokenName'] = ApiClient.convertToType(data['tokenName'], 'String');
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], [IssueTokenRequestMetadataUrls]);
            }
            if (data.hasOwnProperty('userData')) {
                obj['userData'] = GetTokenMetadataResponseMetadataOfIssuanceDataUserData.constructFromObject(data['userData']);
            }
            if (data.hasOwnProperty('encryptions')) {
                obj['encryptions'] = ApiClient.convertToType(data['encryptions'], [IssueTokenRequestMetadataEncryptions]);
            }
            if (data.hasOwnProperty('rules')) {
                obj['rules'] = IssueTokenRequestMetadataRules.constructFromObject(data['rules']);
            }
        }
        return obj;
    }


}

/**
 * Token Symbol it will be identified by (ex. NIBBL)
 * @member {String} tokenName
 */
IssueTokenRequestMetadata.prototype['tokenName'] = undefined;

/**
 * Name of token issuer
 * @member {String} issuer
 */
IssueTokenRequestMetadata.prototype['issuer'] = undefined;

/**
 * Long name or description of token (ex. Nibble)
 * @member {String} description
 */
IssueTokenRequestMetadata.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/IssueTokenRequestMetadataUrls>} urls
 */
IssueTokenRequestMetadata.prototype['urls'] = undefined;

/**
 * @member {module:model/GetTokenMetadataResponseMetadataOfIssuanceDataUserData} userData
 */
IssueTokenRequestMetadata.prototype['userData'] = undefined;

/**
 * Array of encryption instruction objects for encrypting userData
 * @member {Array.<module:model/IssueTokenRequestMetadataEncryptions>} encryptions
 */
IssueTokenRequestMetadata.prototype['encryptions'] = undefined;

/**
 * @member {module:model/IssueTokenRequestMetadataRules} rules
 */
IssueTokenRequestMetadata.prototype['rules'] = undefined;






export default IssueTokenRequestMetadata;

