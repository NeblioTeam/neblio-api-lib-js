/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BroadcastTxResponse from '../model/BroadcastTxResponse';
import Error from '../model/Error';
import GetAddressResponse from '../model/GetAddressResponse';
import GetBlockIndexResponse from '../model/GetBlockIndexResponse';
import GetBlockResponse from '../model/GetBlockResponse';
import GetRawTxResponse from '../model/GetRawTxResponse';
import GetSyncResponse from '../model/GetSyncResponse';
import GetTxResponse from '../model/GetTxResponse';
import GetTxsResponse from '../model/GetTxsResponse';
import SendTxRequest from '../model/SendTxRequest';

/**
* Insight service.
* @module api/InsightApi
* @version 1.2.1
*/
export default class InsightApi {

    /**
    * Constructs a new InsightApi. 
    * @alias module:api/InsightApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAddress operation.
     * @callback module:api/InsightApi~getAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns address object
     * Returns NEBL address object containing information on a specific address
     * @param {String} address Address
     * @param {module:api/InsightApi~getAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAddressResponse}
     */
    getAddress(address, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAddress");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAddressResponse;
      return this.apiClient.callApi(
        '/ins/addr/{address}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAddressBalance operation.
     * @callback module:api/InsightApi~getAddressBalanceCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns address balance in sats
     * Returns NEBL address balance in satoshis
     * @param {String} address Address
     * @param {module:api/InsightApi~getAddressBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getAddressBalance(address, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAddressBalance");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/ins/addr/{address}/balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAddressTotalReceived operation.
     * @callback module:api/InsightApi~getAddressTotalReceivedCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns total received by address in sats
     * Returns total NEBL received by address in satoshis
     * @param {String} address Address
     * @param {module:api/InsightApi~getAddressTotalReceivedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getAddressTotalReceived(address, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAddressTotalReceived");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/ins/addr/{address}/totalReceived', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAddressTotalSent operation.
     * @callback module:api/InsightApi~getAddressTotalSentCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns total sent by address in sats
     * Returns total NEBL sent by address in satoshis
     * @param {String} address Address
     * @param {module:api/InsightApi~getAddressTotalSentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getAddressTotalSent(address, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAddressTotalSent");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/ins/addr/{address}/totalSent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAddressUnconfirmedBalance operation.
     * @callback module:api/InsightApi~getAddressUnconfirmedBalanceCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns address unconfirmed balance in sats
     * Returns NEBL address unconfirmed balance in satoshis
     * @param {String} address Address
     * @param {module:api/InsightApi~getAddressUnconfirmedBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getAddressUnconfirmedBalance(address, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAddressUnconfirmedBalance");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/ins/addr/{address}/unconfirmedBalance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAddressUtxos operation.
     * @callback module:api/InsightApi~getAddressUtxosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all UTXOs at a given address
     * Returns information on each Unspent Transaction Output contained at an address
     * @param {String} address Address
     * @param {module:api/InsightApi~getAddressUtxosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getAddressUtxos(address, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAddressUtxos");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/ins/addr/{address}/utxo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlock operation.
     * @callback module:api/InsightApi~getBlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information regarding a Neblio block
     * Returns blockchain data for a given block based upon the block hash
     * @param {String} blockhash Block Hash
     * @param {module:api/InsightApi~getBlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockResponse}
     */
    getBlock(blockhash, callback) {
      let postBody = null;
      // verify the required parameter 'blockhash' is set
      if (blockhash === undefined || blockhash === null) {
        throw new Error("Missing the required parameter 'blockhash' when calling getBlock");
      }

      let pathParams = {
        'blockhash': blockhash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBlockResponse;
      return this.apiClient.callApi(
        '/ins/block/{blockhash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockIndex operation.
     * @callback module:api/InsightApi~getBlockIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockIndexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns block hash of block
     * Returns the block hash of a block at a given block index
     * @param {Number} blockindex Block Index
     * @param {module:api/InsightApi~getBlockIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockIndexResponse}
     */
    getBlockIndex(blockindex, callback) {
      let postBody = null;
      // verify the required parameter 'blockindex' is set
      if (blockindex === undefined || blockindex === null) {
        throw new Error("Missing the required parameter 'blockindex' when calling getBlockIndex");
      }

      let pathParams = {
        'blockindex': blockindex
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBlockIndexResponse;
      return this.apiClient.callApi(
        '/ins/block-index/{blockindex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRawTx operation.
     * @callback module:api/InsightApi~getRawTxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRawTxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns raw transaction hex
     * Returns raw transaction hex representing a NEBL transaction
     * @param {String} txid Transaction ID
     * @param {module:api/InsightApi~getRawTxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRawTxResponse}
     */
    getRawTx(txid, callback) {
      let postBody = null;
      // verify the required parameter 'txid' is set
      if (txid === undefined || txid === null) {
        throw new Error("Missing the required parameter 'txid' when calling getRawTx");
      }

      let pathParams = {
        'txid': txid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRawTxResponse;
      return this.apiClient.callApi(
        '/ins/rawtx/{txid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatus operation.
     * @callback module:api/InsightApi~getStatusCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Utility API for calling several blockchain node functions
     * Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
     * @param {Object} opts Optional parameters
     * @param {String} opts.q Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash
     * @param {module:api/InsightApi~getStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getStatus(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/ins/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSync operation.
     * @callback module:api/InsightApi~getSyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSyncResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get node sync status
     * Returns information on the node&#39;s sync progress
     * @param {module:api/InsightApi~getSyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSyncResponse}
     */
    getSync(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSyncResponse;
      return this.apiClient.callApi(
        '/ins/sync', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTx operation.
     * @callback module:api/InsightApi~getTxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns transaction object
     * Returns NEBL transaction object representing a NEBL transaction
     * @param {String} txid Transaction ID
     * @param {module:api/InsightApi~getTxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTxResponse}
     */
    getTx(txid, callback) {
      let postBody = null;
      // verify the required parameter 'txid' is set
      if (txid === undefined || txid === null) {
        throw new Error("Missing the required parameter 'txid' when calling getTx");
      }

      let pathParams = {
        'txid': txid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTxResponse;
      return this.apiClient.callApi(
        '/ins/tx/{txid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTxs operation.
     * @callback module:api/InsightApi~getTxsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTxsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transactions by block or address
     * Returns all transactions by block or address
     * @param {Object} opts Optional parameters
     * @param {String} opts.address Address
     * @param {String} opts.block Block Hash
     * @param {Number} opts.pageNum Page number to display
     * @param {module:api/InsightApi~getTxsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTxsResponse}
     */
    getTxs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'address': opts['address'],
        'block': opts['block'],
        'pageNum': opts['pageNum']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTxsResponse;
      return this.apiClient.callApi(
        '/ins/txs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendTx operation.
     * @callback module:api/InsightApi~sendTxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BroadcastTxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Broadcasts a signed raw transaction to the network (not NTP1 specific)
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     * @param {module:model/SendTxRequest} sendTxRequest Object representing a transaction to broadcast
     * @param {module:api/InsightApi~sendTxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BroadcastTxResponse}
     */
    sendTx(sendTxRequest, callback) {
      let postBody = sendTxRequest;
      // verify the required parameter 'sendTxRequest' is set
      if (sendTxRequest === undefined || sendTxRequest === null) {
        throw new Error("Missing the required parameter 'sendTxRequest' when calling sendTx");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastTxResponse;
      return this.apiClient.callApi(
        '/ins/tx/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
