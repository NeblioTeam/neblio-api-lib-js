/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BroadcastTxResponse', 'model/Error', 'model/GetAddressBalanceResponse', 'model/GetAddressResponse', 'model/GetAddressTotalReceivedResponse', 'model/GetAddressTotalSentResponse', 'model/GetAddressUnconfirmedBalanceResponse', 'model/GetAddressUtxosResponse', 'model/GetBlockIndexResponse', 'model/GetBlockResponse', 'model/GetRawTxResponse', 'model/GetStatusResponse', 'model/GetSyncResponse', 'model/GetTxResponse', 'model/GetTxsResponse', 'model/SendTxRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BroadcastTxResponse'), require('../model/Error'), require('../model/GetAddressBalanceResponse'), require('../model/GetAddressResponse'), require('../model/GetAddressTotalReceivedResponse'), require('../model/GetAddressTotalSentResponse'), require('../model/GetAddressUnconfirmedBalanceResponse'), require('../model/GetAddressUtxosResponse'), require('../model/GetBlockIndexResponse'), require('../model/GetBlockResponse'), require('../model/GetRawTxResponse'), require('../model/GetStatusResponse'), require('../model/GetSyncResponse'), require('../model/GetTxResponse'), require('../model/GetTxsResponse'), require('../model/SendTxRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.NeblioRestApiSuite) {
      root.NeblioRestApiSuite = {};
    }
    root.NeblioRestApiSuite.TestnetInsightApi = factory(root.NeblioRestApiSuite.ApiClient, root.NeblioRestApiSuite.BroadcastTxResponse, root.NeblioRestApiSuite.Error, root.NeblioRestApiSuite.GetAddressBalanceResponse, root.NeblioRestApiSuite.GetAddressResponse, root.NeblioRestApiSuite.GetAddressTotalReceivedResponse, root.NeblioRestApiSuite.GetAddressTotalSentResponse, root.NeblioRestApiSuite.GetAddressUnconfirmedBalanceResponse, root.NeblioRestApiSuite.GetAddressUtxosResponse, root.NeblioRestApiSuite.GetBlockIndexResponse, root.NeblioRestApiSuite.GetBlockResponse, root.NeblioRestApiSuite.GetRawTxResponse, root.NeblioRestApiSuite.GetStatusResponse, root.NeblioRestApiSuite.GetSyncResponse, root.NeblioRestApiSuite.GetTxResponse, root.NeblioRestApiSuite.GetTxsResponse, root.NeblioRestApiSuite.SendTxRequest);
  }
}(this, function(ApiClient, BroadcastTxResponse, Error, GetAddressBalanceResponse, GetAddressResponse, GetAddressTotalReceivedResponse, GetAddressTotalSentResponse, GetAddressUnconfirmedBalanceResponse, GetAddressUtxosResponse, GetBlockIndexResponse, GetBlockResponse, GetRawTxResponse, GetStatusResponse, GetSyncResponse, GetTxResponse, GetTxsResponse, SendTxRequest) {
  'use strict';

  /**
   * TestnetInsight service.
   * @module api/TestnetInsightApi
   * @version 1.2.0
   */

  /**
   * Constructs a new TestnetInsightApi. 
   * @alias module:api/TestnetInsightApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the testnetGetAddress operation.
     * @callback module:api/TestnetInsightApi~testnetGetAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns address object
     * Returns NEBL address object containing information on a specific address
     * @param {String} address Address
     * @param {module:api/TestnetInsightApi~testnetGetAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAddressResponse}
     */
    this.testnetGetAddress = function(address, callback) {
      var postBody = null;

      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling testnetGetAddress");
      }


      var pathParams = {
        'address': address
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAddressResponse;

      return this.apiClient.callApi(
        '/testnet/ins/addr/{address}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testnetGetAddressBalance operation.
     * @callback module:api/TestnetInsightApi~testnetGetAddressBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAddressBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns address balance in sats
     * Returns NEBL address balance in satoshis
     * @param {String} address Address
     * @param {module:api/TestnetInsightApi~testnetGetAddressBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAddressBalanceResponse}
     */
    this.testnetGetAddressBalance = function(address, callback) {
      var postBody = null;

      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling testnetGetAddressBalance");
      }


      var pathParams = {
        'address': address
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAddressBalanceResponse;

      return this.apiClient.callApi(
        '/testnet/ins/addr/{address}/balance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testnetGetAddressTotalReceived operation.
     * @callback module:api/TestnetInsightApi~testnetGetAddressTotalReceivedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAddressTotalReceivedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns total received by address in sats
     * Returns total NEBL received by address in satoshis
     * @param {String} address Address
     * @param {module:api/TestnetInsightApi~testnetGetAddressTotalReceivedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAddressTotalReceivedResponse}
     */
    this.testnetGetAddressTotalReceived = function(address, callback) {
      var postBody = null;

      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling testnetGetAddressTotalReceived");
      }


      var pathParams = {
        'address': address
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAddressTotalReceivedResponse;

      return this.apiClient.callApi(
        '/testnet/ins/addr/{address}/totalReceived', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testnetGetAddressTotalSent operation.
     * @callback module:api/TestnetInsightApi~testnetGetAddressTotalSentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAddressTotalSentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns total sent by address in sats
     * Returns total NEBL sent by address in satoshis
     * @param {String} address Address
     * @param {module:api/TestnetInsightApi~testnetGetAddressTotalSentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAddressTotalSentResponse}
     */
    this.testnetGetAddressTotalSent = function(address, callback) {
      var postBody = null;

      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling testnetGetAddressTotalSent");
      }


      var pathParams = {
        'address': address
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAddressTotalSentResponse;

      return this.apiClient.callApi(
        '/testnet/ins/addr/{address}/totalSent', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testnetGetAddressUnconfirmedBalance operation.
     * @callback module:api/TestnetInsightApi~testnetGetAddressUnconfirmedBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAddressUnconfirmedBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns address unconfirmed balance in sats
     * Returns NEBL address unconfirmed balance in satoshis
     * @param {String} address Address
     * @param {module:api/TestnetInsightApi~testnetGetAddressUnconfirmedBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAddressUnconfirmedBalanceResponse}
     */
    this.testnetGetAddressUnconfirmedBalance = function(address, callback) {
      var postBody = null;

      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling testnetGetAddressUnconfirmedBalance");
      }


      var pathParams = {
        'address': address
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAddressUnconfirmedBalanceResponse;

      return this.apiClient.callApi(
        '/testnet/ins/addr/{address}/unconfirmedBalance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testnetGetAddressUtxos operation.
     * @callback module:api/TestnetInsightApi~testnetGetAddressUtxosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAddressUtxosResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all UTXOs at a given address
     * Returns information on each Unspent Transaction Output contained at an address
     * @param {String} address Address
     * @param {module:api/TestnetInsightApi~testnetGetAddressUtxosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAddressUtxosResponse}
     */
    this.testnetGetAddressUtxos = function(address, callback) {
      var postBody = null;

      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling testnetGetAddressUtxos");
      }


      var pathParams = {
        'address': address
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAddressUtxosResponse;

      return this.apiClient.callApi(
        '/testnet/ins/addr/{address}/utxo', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testnetGetBlock operation.
     * @callback module:api/TestnetInsightApi~testnetGetBlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information regarding a Neblio block
     * Returns blockchain data for a given block based upon the block hash
     * @param {String} blockhash Block Hash
     * @param {module:api/TestnetInsightApi~testnetGetBlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockResponse}
     */
    this.testnetGetBlock = function(blockhash, callback) {
      var postBody = null;

      // verify the required parameter 'blockhash' is set
      if (blockhash === undefined || blockhash === null) {
        throw new Error("Missing the required parameter 'blockhash' when calling testnetGetBlock");
      }


      var pathParams = {
        'blockhash': blockhash
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetBlockResponse;

      return this.apiClient.callApi(
        '/testnet/ins/block/{blockhash}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testnetGetBlockIndex operation.
     * @callback module:api/TestnetInsightApi~testnetGetBlockIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockIndexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns block hash of block
     * Returns the block hash of a block at a given block index
     * @param {Number} blockindex Block Index
     * @param {module:api/TestnetInsightApi~testnetGetBlockIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockIndexResponse}
     */
    this.testnetGetBlockIndex = function(blockindex, callback) {
      var postBody = null;

      // verify the required parameter 'blockindex' is set
      if (blockindex === undefined || blockindex === null) {
        throw new Error("Missing the required parameter 'blockindex' when calling testnetGetBlockIndex");
      }


      var pathParams = {
        'blockindex': blockindex
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetBlockIndexResponse;

      return this.apiClient.callApi(
        '/testnet/ins/block-index/{blockindex}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testnetGetRawTx operation.
     * @callback module:api/TestnetInsightApi~testnetGetRawTxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRawTxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns raw transaction hex
     * Returns raw transaction hex representing a NEBL transaction
     * @param {String} txid Transaction ID
     * @param {module:api/TestnetInsightApi~testnetGetRawTxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRawTxResponse}
     */
    this.testnetGetRawTx = function(txid, callback) {
      var postBody = null;

      // verify the required parameter 'txid' is set
      if (txid === undefined || txid === null) {
        throw new Error("Missing the required parameter 'txid' when calling testnetGetRawTx");
      }


      var pathParams = {
        'txid': txid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetRawTxResponse;

      return this.apiClient.callApi(
        '/testnet/ins/rawtx/{txid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testnetGetStatus operation.
     * @callback module:api/TestnetInsightApi~testnetGetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Utility API for calling several blockchain node functions
     * tility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
     * @param {Object} opts Optional parameters
     * @param {String} opts.q Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash
     * @param {module:api/TestnetInsightApi~testnetGetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStatusResponse}
     */
    this.testnetGetStatus = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'q': opts['q'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetStatusResponse;

      return this.apiClient.callApi(
        '/testnet/ins/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testnetGetSync operation.
     * @callback module:api/TestnetInsightApi~testnetGetSyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSyncResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get node sync status
     * Returns information on the node&#39;s sync progress
     * @param {module:api/TestnetInsightApi~testnetGetSyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSyncResponse}
     */
    this.testnetGetSync = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSyncResponse;

      return this.apiClient.callApi(
        '/testnet/ins/sync', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testnetGetTx operation.
     * @callback module:api/TestnetInsightApi~testnetGetTxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns transaction object
     * Returns NEBL transaction object representing a NEBL transaction
     * @param {String} txid Transaction ID
     * @param {module:api/TestnetInsightApi~testnetGetTxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTxResponse}
     */
    this.testnetGetTx = function(txid, callback) {
      var postBody = null;

      // verify the required parameter 'txid' is set
      if (txid === undefined || txid === null) {
        throw new Error("Missing the required parameter 'txid' when calling testnetGetTx");
      }


      var pathParams = {
        'txid': txid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetTxResponse;

      return this.apiClient.callApi(
        '/testnet/ins/tx/{txid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testnetGetTxs operation.
     * @callback module:api/TestnetInsightApi~testnetGetTxsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTxsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transactions by block or address
     * Returns all transactions by block or address
     * @param {Object} opts Optional parameters
     * @param {String} opts.address Address
     * @param {String} opts.block Block Hash
     * @param {Number} opts.page Page number to display
     * @param {module:api/TestnetInsightApi~testnetGetTxsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTxsResponse}
     */
    this.testnetGetTxs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'address': opts['address'],
        'block': opts['block'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetTxsResponse;

      return this.apiClient.callApi(
        '/testnet/ins/txs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testnetSendTx operation.
     * @callback module:api/TestnetInsightApi~testnetSendTxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BroadcastTxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Broadcasts a signed raw transaction to the network (not NTP1 specific)
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     * @param {module:model/SendTxRequest} body Object representing a transaction to broadcast
     * @param {module:api/TestnetInsightApi~testnetSendTxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BroadcastTxResponse}
     */
    this.testnetSendTx = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling testnetSendTx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BroadcastTxResponse;

      return this.apiClient.callApi(
        '/testnet/ins/tx/send', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
